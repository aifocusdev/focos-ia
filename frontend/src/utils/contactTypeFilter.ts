import type { User } from '../types/user.types'
import type { Contact } from '../types/conversation.types'

/**
 * Verifica se uma conversa deve ser aceita baseado nas prefer√™ncias de tipo de contato do usu√°rio
 * @param user - Usu√°rio com prefer√™ncias de tipo de contato
 * @param contact - Contato da conversa a ser validada
 * @returns true se a conversa deve ser aceita, false caso contr√°rio
 */
export function shouldAcceptConversation(user: User | null, contact: Contact): boolean {
  // Se usu√°rio n√£o est√° logado, n√£o aceitar conversas
  if (!user) {
    return false
  }

  // Se a restri√ß√£o n√£o est√° ativada, aceitar todas as conversas
  if (!user.contact_type_restriction) {
    return true
  }

  // Se o contact n√£o tem tipo definido, tratar como 'all' por padr√£o
  const contactType = contact.contact_type || 'all'

  // Se a prefer√™ncia do usu√°rio √© 'all', aceitar todos os tipos
  if (user.contact_type_preference === 'all') {
    return true
  }

  // Caso contr√°rio, s√≥ aceitar conversas do tipo espec√≠fico
  return contactType === user.contact_type_preference
}

/**
 * Fun√ß√£o de log para debug de filtragem de conversas
 * @param user - Usu√°rio atual
 * @param contact - Contato sendo filtrado
 * @param accepted - Se a conversa foi aceita ou n√£o
 */
export function logContactTypeFilter(user: User | null, contact: Contact, accepted: boolean): void {
  const contactType = contact.contact_type || 'all'
  console.log(`üîç Contact Type Filter:`, {
    contactName: contact.name,
    contactType,
    userPreference: user?.contact_type_preference,
    restrictionEnabled: user?.contact_type_restriction,
    accepted,
    reason: !user ? 'No user logged in' :
            !user.contact_type_restriction ? 'Restriction disabled' :
            user.contact_type_preference === 'all' ? 'User accepts all types' :
            contactType === user.contact_type_preference ? 'Type matches preference' :
            'Type does not match preference'
  })
}